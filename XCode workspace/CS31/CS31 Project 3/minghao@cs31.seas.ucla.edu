#include <iostream>
#include <string>
#include<fstream>
#include<vector>
#include<cassert>
#include<algorithm>


using namespace std;

bool isValidUppercaseStateCode(string stateCode) { // checks if string is a valid state code
    const string codes =
    "AL.AK.AZ.AR.CA.CO.CT.DE.FL.GA.HI.ID.IL.IN.IA.KS.KY."
    "LA.ME.MD.MA.MI.MN.MS.MO.MT.NE.NV.NH.NJ.NM.NY.NC.ND."
    "OH.OK.OR.PA.RI.SC.SD.TN.TX.UT.VT.VA.WA.WV.WI.WY";
    return (stateCode.size() == 2  &&
            stateCode.find('.') == string::npos  &&  // no '.' in stateCode
            codes.find(stateCode) != string::npos);  // match found
}
char toU(char c) { if (c >= 'a' && c <= 'z') c += 'A' - 'a'; return c;} // changes lowercase letter to uppercase
bool isL(char c) { return (c >= 'A' && c <= 'Z');} // checks if char is letter
bool isN(char c) { return (c >= '0' && c <= '9');} // checks if char is digit
string allUpper(string s) { for (int i = 0; i < s.length(); i++) s[i] = toU(s[i]); return s;} // changes string to all uppercase

bool isPartyResult(string s) { //checks if a string is a party result
    //if (s.length() == 0) return true;
    if (s.length() < 2 || s.length() > 3) return false;
    if (s.length() == 2) return (isN(s[0]) && isL(s[1]));
    else return (isN(s[0]) && isN(s[1]) && isL(s[2]));
}
bool isStateForecast(string s) { // checks if a string is a stateforecast
    if (s.length() < 2) return false;
    if (!isValidUppercaseStateCode(s.substr(0, 2))) return false; // check first 2 characters for statecode
    for (int i = 2; i < s.length(); i++) {
        if (s.length() - i < 2) return false;
        if (isPartyResult(s.substr(i, 2))) i++; // check next two chars for party result
        else if (i <= s.length() - 3 && isPartyResult(s.substr(i, 3))) i += 2; //check next 3 chars for party result
        else return false;
    }
    return true;
}

bool hasProperSyntax(string pollData) { // checks if string is valid poll data string
    if (pollData.length() == 0) return true; // check if empty string
    pollData = allUpper(pollData); // change to all upper for consistency
    string s = "";
    for (int i = 0; i <= pollData.length(); i++) {
        if (i == pollData.length() || pollData[i] == ',') { // if end of string or comma, check
            if (!isStateForecast(s)) return false; // check if string is state forecast
            s = ""; // reset string for new state forecast
            continue; // skip the comma
        }
        s += pollData[i]; // add to string when not comma
    }
    return true; // if nothing is wrong, it is true
}

int tallySeats(string pollData, char party, int& seatTally) { // tallies seats for a party
    pollData = allUpper(pollData); // consistent uppercase
    if(!hasProperSyntax(pollData)) return 1; // return 1 if invalid string
    if (party >= 'a' && party <= 'z') party += 'A' - 'a'; //convert party to uppercase
    if (!isL(party)) return 2; // if not a letter, return 2
    seatTally = 0; // set seatTally to 0 in case it was not reset
    for (int i = 0; i < pollData.length(); i++) {
        if (pollData[i] == party && i > 0) { //find every iteration of the party letter
            if (!isN(pollData[i - 1])) continue; // if not preceded by number, don't use it
            seatTally += (pollData[i - 1] - '0'); // add the digit before it
            if (i > 1 && isN(pollData[i - 2])) seatTally += 10 * (pollData[i - 2] - '0'); // if it is 2 digits long, add 10 times the first digit
        }
    }
    return 0; // no error so return 0;
}

int main() { // this is just testing stuff :)
    ifstream infile;
    infile.open("cases.txt");
    int i=0;
    vector<string>names;
    names.push_back("hasProperSyntax");
    names.push_back("tallySeats");
    vector<int>f;
    string buf;
    while(getline(infile,buf)){
        cout<<"buf="<<buf<<endl;
        int tc=stoi(buf.substr(0,1));
        tc--;
        printf("===TEST CASE %d, testing ",i+1);cout<<names[tc]<<"==="<<endl;
        int r;
        bool p=1;
        if(!tc){//hasProperSyntax
            string s=buf.substr(buf.find(" ")+1,buf.find_last_of(" ")-buf.find(" ")-1);
            /* cout<<"s='"<<s<<"'"<<endl; */
            /* cout<<s.size()<<endl; */
            r=stoi(buf.substr(buf.find_last_of(" ")));
            /* cout<<"r="<<r<<endl; */
            bool cr=hasProperSyntax(s);
            cout<<"TEST CASE DATA: pollData= '"<<s<<"'"<<" pollData length = "<<s.length()<<endl;
            cout<<"EXPECTED: "<<"expectedResult= "<<r<<endl;
            cout<<"YOUR PROGRAM RESULT: "<<"yourResult= "<<cr<<endl;
            p=(r==cr);
        }else{//tallySeats
            int st=-999;
            vector<int>sp;
            sp.push_back(buf.find(" "));
            int b=buf.size()-1;
            while(b>=0&&sp.size()<=4){
                if(buf[b]==' ')sp.push_back(b);
                b--;
            }
            sort(sp.begin(),sp.end());
            /* for(auto &a:sp)cout<<a<<" "; */
            /* cout<<endl; */
            string s=buf.substr(sp[1]+1,sp[2]-sp[1]-1);
            /* cout<<"s="<<s<<endl; */
            char c=buf[sp[3]-1];
            int r=buf[sp[3]+1]-'0';
            int r2=stoi(buf.substr(sp[4]));
            /* cout<<"r="<<r<<"r2="<<r2<<endl; */
            int cr=tallySeats(s,c,st);
            cout<<"TEST CASE DATA: pollData= '"<<s<<"' pollData length = "<<s.length()<<" party= '"<<c<<"'"<<endl;
            cout<<"EXPECTED: "<<"expectedResult= "<<r<<" expectedVotes= "<<r2<<endl;
            cout<<"YOUR PROGRAM RESULT: "<<"yourResult= "<<cr<<" yourVotes= "<<st<<endl;
            p=(r==cr&&st==r2);
        }
        if(p)printf(">TEST CASE %d PASSED<\n",i+1);
        else{
            printf(">TEST CASE %d FAILED<\n",i+1);
            f.push_back(i+1);
        }
        i++;
    }
    if(!f.size())printf("*****ALL %d TEST CASES PASSED  *****\n",i);
    else printf("***** %d/%d (%.2f) OF TEST CASES FAILED *****\n",f.size(),i,1.0*f.size()/i);
    infile.close();
    int i_hate_max_wu;
    cout<<"keeping window open for visual c++ users, if ur on mac/linux you can exit with ctrl-c";
    cin>>i_hate_max_wu;
    return 0;

}
